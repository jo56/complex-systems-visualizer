name: Build and Release

on:
  push:
    tags:
      - 'v*' # e.g. v1.0.0

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Generate .ico from PNG
        run: |
          if (Test-Path "sim-app/assets/AppIcon.png") {
            magick "sim-app/assets/AppIcon.png" "sim-app/assets/AppIcon.ico"
          } else {
            Write-Host "No AppIcon.png found, skipping Windows icon generation"
          }

      - name: Build (Windows)
        working-directory: sim-app
        run: cargo build --release --bin mandlebrot-viz

      - name: Package (Windows ZIP)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item "$env:GITHUB_WORKSPACE\target\release\mandlebrot-viz.exe" dist\
          if (Test-Path README.md) { Copy-Item README.md dist\ }
          if (Test-Path LICENSE)   { Copy-Item LICENSE   dist\ }
          if (Test-Path assets)    { Copy-Item assets    dist\assets -Recurse }
          $zip = "mandlebrot-viz-${{ github.ref_name }}-windows-x64.zip"
          Compress-Archive -Path dist\* -DestinationPath $zip -Force
          echo "OUTFILE=$zip" >> $env:GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.OUTFILE }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Generate .icns from PNG
        run: |
          SRC="sim-app/assets/AppIcon.png"
          if [ -f "$SRC" ]; then
            ICONSET="sim-app/assets/AppIcon.iconset"
            mkdir -p "$ICONSET"
            sips -z 16 16     "$SRC" --out "$ICONSET/icon_16x16.png"
            sips -z 32 32     "$SRC" --out "$ICONSET/icon_16x16@2x.png"
            sips -z 32 32     "$SRC" --out "$ICONSET/icon_32x32.png"
            sips -z 64 64     "$SRC" --out "$ICONSET/icon_32x32@2x.png"
            sips -z 128 128   "$SRC" --out "$ICONSET/icon_128x128.png"
            sips -z 256 256   "$SRC" --out "$ICONSET/icon_128x128@2x.png"
            sips -z 256 256   "$SRC" --out "$ICONSET/icon_256x256.png"
            sips -z 512 512   "$SRC" --out "$ICONSET/icon_256x256@2x.png"
            sips -z 512 512   "$SRC" --out "$ICONSET/icon_512x512.png"
            cp "$SRC" "$ICONSET/icon_512x512@2x.png"
            iconutil -c icns "$ICONSET"
            mv sim-app/assets/AppIcon.icns sim-app/assets/AppIcon.icns
          else
            echo "No AppIcon.png found, skipping macOS icon generation"
          fi

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Build macOS app bundle
        working-directory: sim-app
        run: cargo bundle --release --bin mandlebrot-viz

      - name: Package (macOS DMG)
        run: |
          set -e
          mkdir dmg
          cp -R target/release/bundle/osx/*.app dmg/ || echo "No .app bundle found"
          [ -f README.md ] && cp README.md dmg/
          [ -f LICENSE ]   && cp LICENSE dmg/
          [ -d assets ]    && cp -r assets dmg/assets
          OUT="mandlebrot-viz-${{ github.ref_name }}-macos-arm64.dmg"
          hdiutil create -volname "MandlebrotViz" -srcfolder dmg -ov -format UDZO "$OUT"
          echo "OUTFILE=$OUT" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ${{ env.OUTFILE }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build (Linux)
        working-directory: sim-app
        run: cargo build --release --bin mandlebrot-viz

      - name: Package (Linux tar.gz)
        run: |
          set -e
          mkdir -p dist
          cp target/release/mandlebrot-viz dist/
          [ -f README.md ] && cp README.md dist/
          [ -f LICENSE ]   && cp LICENSE dist/
          [ -d assets ]    && cp -r assets dist/
          OUT="mandlebrot-viz-${{ github.ref_name }}-linux-x64.tar.gz"
          tar -czf "$OUT" -C dist .
          echo "OUTFILE=$OUT" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: linux-tar
          path: ${{ env.OUTFILE }}

  publish:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-bundles
          merge-multiple: true

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          name: "Mandlebrot Viz ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            release-bundles/mandlebrot-viz-${{ github.ref_name }}-windows-*.zip
            release-bundles/mandlebrot-viz-${{ github.ref_name }}-macos-*.dmg
            release-bundles/mandlebrot-viz-${{ github.ref_name }}-linux-*.tar.gz
